{
	"env": {
		"browser": true,
		"es6": true
	},
	"extends": [
		"eslint:recommended",
		"plugin:react/recommended",
		"plugin:@typescript-eslint/eslint-recommended"
	],
	"globals": {
		"Atomics": "readonly",
		"SharedArrayBuffer": "readonly"
	},
	"parser": "@typescript-eslint/parser",
	"parserOptions": {
		"ecmaFeatures": {
			"jsx": true
		},
		"ecmaVersion": 2018,
		"sourceType": "module"
	},
	"plugins": ["react", "react-hooks", "@typescript-eslint"],
	"rules": {
		"max-len": [
			"error",
			{
				"code": 100
			}
		],
		"prefer-promise-reject-errors": ["off"],
		"no-return-assign": ["off"],
		"react/jsx-props-no-spreading": ["off"],
		"no-console": 2,
		"indent": ["error", 2, { "ignoredNodes": ["JSXElement"] }],
		"react/jsx-indent": ["error", 2],
		"linebreak-style": ["error", "unix"],
		"quotes": ["error", "double"],
		"semi": ["error", "always"],
		"react/jsx-uses-react": "error",
		"react/jsx-uses-vars": "error",
		"react/jsx-no-duplicate-props": "error",
		"react/no-access-state-in-setstate": "warn", // Reports when this.state is accessed within setState
		"react/display-name": "error", // Prevent missing displayName in a React component definition
		"react/no-danger": "error", //Prevent usage of dangerous JSX props
		"react-hooks/rules-of-hooks": "error", // Checks rules of Hooks
		"react/no-danger-with-children": "error", //Report when a DOM element is using both children and dangerouslySetInnerHTML
		"react-hooks/exhaustive-deps": "warn", // Checks effect dependencies
		"react/no-deprecated": "error", // Prevent usage of deprecated methods
		"react/no-multi-comp": "error", //Prevent multiple component definition per file,
		"react/no-this-in-sfc": "error", // Report "this" being used in stateless components
		"react/no-unsafe": "error", //Prevent usage of unsafe lifecycle methods
		"react/prefer-stateless-function": "error", //Enforce stateless components to be written as a pure function
		"react/require-default-props": "error", //Enforce a defaultProps definition for every prop that is not a required prop.
		"react/self-closing-comp": "error", //Prevent extra closing tags for components without children (fixable)
		"react/jsx-filename-extension": [1, { "extensions": [".ts", ".tsx"] }], // Restrict file extensions that may contain JSX (react/jsx-filename-extension)
		"react/jsx-key": "error", // Detect missing key prop (react/jsx-key)
		"import/no-unresolved": "off"
	},
	"overrides": [
		{
			"files": ["*.ts", "*.tsx"],
			"rules": {
				"@typescript-eslint/no-unused-vars": [2, { "args": "none"}]
			}
		}
	],
	"settings": {
    "react": {
      "version": "latest"
    }
  }
}
